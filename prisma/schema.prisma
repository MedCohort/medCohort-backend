// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActiveStatus {
  ACTIVE
  INACTIVE
}

enum Deadline {
  DEFAULT_DEADLINE
  TWELVE_HOURS
  TWENTY_FOUR_HOURS
  TWO_DAYS
  THREE_DAYS
  FIVE_DAYS
  SEVEN_DAYS
  FOURTEEN_DAYS
}

enum Discipline {
  ENGLISH_LITERATURE
  BUSINESS_MANAGEMENT
  HEALTH_SCIENCE_NURSING
  HISTORY
  PSYCHOLOGY_EDUCATION
  ART_MUSIC_FILM_STUDIES
  SOCIAL_POLITICAL_SCIENCE
  SOCIOLOGY
  PHILOSOPHY
  MARKETING
  RELIGIOUS_STUDIES
  ECONOMICS
  COMPUTER_SCIENCE_TECHNOLOGY
  OTHER
}

enum Education {
  HIGH_SCHOOL
  COLLEGE
  UNIVERSITY
  MASTERS
  PHD
}

enum Format {
  APA
  MLA
  CHICAGO
}

model Client {
  id           Int          @id @default(autoincrement())
  fullNames    String
  username     String       @unique
  email        String       @unique
  password     String
  tel          String
  role       String       @default("client")
  activeStatus ActiveStatus @default(ACTIVE)
  isEmailVerified    Boolean      @default(false)
  emailVerificationToken String?
  resetPasswordToken String?
  resetPasswordExpires   DateTime?
  assignments  Assignment[]
  lastLogin    DateTime?
  createdAt    DateTime     @default(now()) 
  updatedAt    DateTime     @updatedAt
}

model Writer {
  id         Int          @id @default(autoincrement())
  name       String
  email      String       @unique
  password   String
  admin      Admin        @relation(fields: [adminId], references: [id])
  adminId    Int
  delegations Delegation[]
  createdAt  DateTime     @default(now()) 
  updatedAt  DateTime     @updatedAt
  lastLogin  DateTime?
}

model Admin {
  id         Int          @id @default(autoincrement())
  name       String
  email      String       @unique
  password   String
  role       String       @default("admin")
  writers    Writer[]
  delegations Delegation[]
  createdAt  DateTime     @default(now()) 
  updatedAt  DateTime     @updatedAt
  lastLogin  DateTime?
}

model Support {
  id         Int          @id @default(autoincrement())
  name       String
  email      String       @unique
}

model Assignment {
  id            Int        @id @default(autoincrement())
  title         String
  description   String
  deadline      Deadline   @default(DEFAULT_DEADLINE)
  instructions  String
  files         String[]
  pages         Int
  typeOfPaper   String
  discipline    Discipline @default(OTHER)
  qualityLevel  Education  @default(UNIVERSITY)
  format        Format     @default(APA)
  sources       Int
  client        Client     @relation(fields: [clientId], references: [id]) // Add this line to establish the relationship
  clientId      Int        
  delegation    Delegation?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Delegation {
  id              Int        @id @default(autoincrement())
  assignment      Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade) 
  assignmentId    Int        @unique
  writer          Writer     @relation(fields: [writerId], references: [id], onDelete: Cascade)
  writerId        Int
  admin           Admin      @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId         Int
  delegationDate  DateTime   @default(now())
  status          String
  remarks         String?
  submissionDate  DateTime?
  reviewDate      DateTime?
}